import json
import urllib.parse
import boto3
import csv
from io import StringIO

s3 = boto3.client('s3')

def calculate_regression_coefficient(x, y):
    n = len(x)
    if n != len(y) or n == 0:
        raise ValueError("x and y must have the same non-zero length")
    
    sum_x = sum(x)
    sum_y = sum(y)
    sum_xy = sum(xi * yi for xi, yi in zip(x, y))
    sum_x_squared = sum(xi * xi for xi in x)
    
    # Calculate the slope (regression coefficient)
    slope = (n * sum_xy - sum_x * sum_y) / (n * sum_x_squared - sum_x * sum_x)
    return slope

def lambda_handler(event, context):
    # Get the object from the event
    bucket = event['Records'][0]['s3']['bucket']['name']
    key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
    
    try:
        # Retrieve the object from S3
        response = s3.get_object(Bucket=bucket, Key=key)
        
        # Read the content of the file
        file_content = response['Body'].read().decode('utf-8')
        
        # Parse the CSV content
        csv_reader = csv.reader(StringIO(file_content))
        x_values = []
        y_values = []
        
        for row in csv_reader:
            if len(row) != 2:
                raise ValueError(f"Invalid row format: {row}. Expected 2 values per row.")
            x_values.append(float(row[0]))
            y_values.append(float(row[1]))
        
        # Calculate the regression coefficient
        regression_coefficient = calculate_regression_coefficient(x_values, y_values)
        
        # Print results
        print(f"CONTENT TYPE: {response['ContentType']}")
        print(f"Number of data points: {len(x_values)}")
        print(f"Regression Coefficient: {regression_coefficient}")
        
        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': 'Regression coefficient calculated successfully',
                'contentType': response['ContentType'],
                'dataPoints': len(x_values),
                'regressionCoefficient': regression_coefficient
            })
        }
    except Exception as e:
        print(f'Error: {str(e)}')
        print(f'Error processing file {key} from bucket {bucket}. '
              f'Make sure it exists, is in the correct format, and your bucket is in the same region as this function.')
        return {
            'statusCode': 500,
            'body': json.dumps({
                'message': 'Error occurred while processing the file',
                'error': str(e)
            })
        }